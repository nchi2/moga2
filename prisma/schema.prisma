generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
}


model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  email           String?          @unique
  password        String?
  phone           String?          @unique
  github_id       String?          @unique
  kakao_id        String?          @unique
  avatar          String?          @default("https://github.com/identicons/github.png")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tokens          SMSToken[]
  products        Product[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  chat_rooms      ChatRoom[]
  messages        Message[]
  productComments ProductComment[]
}

model SMSToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user_id   Int
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@index([user_id])
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      Int
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    ProductComment[]
  chatRooms   ChatRoom[]
  @@index([userId])
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([postId])
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([productId])
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id(name: "id", [userId, postId])
  @@index([userId])
  @@index([postId])
}

model ChatRoom {
  id        String   @id @default(cuid())
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  messages  Message[]
  @@index([productId])
}

model Message {
  id         String   @id @default(uuid())
  payload    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoomId String
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status     String   @default("sent")
  @@index([chatRoomId])
  @@index([userId])
}
